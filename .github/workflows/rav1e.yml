name: rav1e

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  rustfmt-clippy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Install nasm
      env:
        LINK: http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm
        NASM_VERSION: 2.14.02-1
        NASM_SHA256: 5225d0654783134ae616f56ce8649e4df09cba191d612a0300cfd0494bb5a3ef
      run: |
        curl -O "$LINK/nasm_${NASM_VERSION}_amd64.deb"
        echo "$NASM_SHA256  nasm_${NASM_VERSION}_amd64.deb" | sha256sum --check
        sudo dpkg -i "nasm_${NASM_VERSION}_amd64.deb"
    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy, rustfmt
    - name: Run rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check --verbose
    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -- -D warnings --verbose -A clippy::wrong-self-convention

  build-unix:

    strategy:
      matrix:
        conf:
         - 1.36.0-tests
         - aom-tests
         - dav1d-tests
         - grcov-coveralls
         - bench
         - doc
         - check-no-default
         - check-extra-feats
        include:
         - conf: 1.36.0-tests
           toolchain: 1.36.0
         - conf: aom-tests
           toolchain: stable
         - conf: dav1d-tests
           toolchain: stable
         - conf: grcov-coveralls
           toolchain: nightly
         - conf: bench
           toolchain: stable
         - conf: doc
           toolchain: stable
         - conf: check-no-default
           toolchain: stable
         - conf: check-extra-feats
           toolchain: stable

    env:
      RUST_BACKTRACE: 1
      RUSTC_WRAPPER: sccache

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Install nasm
      env:
        LINK: http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm
        NASM_VERSION: 2.14.02-1
        NASM_SHA256: 5225d0654783134ae616f56ce8649e4df09cba191d612a0300cfd0494bb5a3ef
      run: |
        curl -O "$LINK/nasm_${NASM_VERSION}_amd64.deb"
        echo "$NASM_SHA256  nasm_${NASM_VERSION}_amd64.deb" | sha256sum --check
        sudo dpkg -i "nasm_${NASM_VERSION}_amd64.deb"
    - name: Install aom
      if: >
        matrix.conf == '1.36.0-tests' || matrix.conf == 'aom-tests' ||
        matrix.conf == 'grcov-coveralls'
      env:
        LINK: http://debian-archive.trafficmanager.net/debian/pool/main/a/aom
        AOM_VERSION: 1.0.0.errata1-2
        AOM_DEV_SHA256: fd07d90dafe1512d79c1734adb1c4f33215f40856e89e9d505c7e8c8b0ae6a0f
        AOM_LIB_SHA256: 3f096b6057871c12bbdfdf8b2e18d12ed0f643b8e23fdbeddd80b860c55c53ff
      run: |
        curl -O "$LINK/libaom-dev_${AOM_VERSION}_amd64.deb" \
             -O "$LINK/libaom0_${AOM_VERSION}_amd64.deb"
        echo "$AOM_DEV_SHA256  libaom-dev_${AOM_VERSION}_amd64.deb" | sha256sum --check
        echo "$AOM_LIB_SHA256  libaom0_${AOM_VERSION}_amd64.deb" | sha256sum --check
        sudo dpkg -i "libaom-dev_${AOM_VERSION}_amd64.deb" \
                     "libaom0_${AOM_VERSION}_amd64.deb"
    - name: Install dav1d
      if: >
        matrix.conf == '1.36.0-tests' || matrix.conf == 'dav1d-tests' ||
        matrix.conf == 'grcov-coveralls'
      env:
        LINK: http://www.deb-multimedia.org/pool/main/d/dav1d-dmo
        DAV1D_VERSION: 0.5.1-dmo1
        DAV1D_DEV_SHA256: feb8fd535ae7747963d3d17ed394dc5bdb3e6163fdb77df787ec72a8ca9aac2e
        DAV1D_LIB_SHA256: 682fd52fcfd73c225f9aaee200cbe69eceefdc687b8ce03f354731f5288a28ce
      run: |
        curl -O "$LINK/libdav1d-dev_${DAV1D_VERSION}_amd64.deb" \
             -O "$LINK/libdav1d3_${DAV1D_VERSION}_amd64.deb"
        echo "$DAV1D_DEV_SHA256  libdav1d-dev_${DAV1D_VERSION}_amd64.deb" | sha256sum --check
        echo "$DAV1D_LIB_SHA256  libdav1d3_${DAV1D_VERSION}_amd64.deb" | sha256sum --check
        sudo dpkg -i "libdav1d-dev_${DAV1D_VERSION}_amd64.deb" \
                     "libdav1d3_${DAV1D_VERSION}_amd64.deb"
    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true
    - name: Install sccache
      env:
        LINK: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: 0.2.12
      run: |
        curl -L "$LINK/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz" | tar xz
        echo "::add-path::$PWD/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl/"
    - name: Start sccache
      env:
        SCCACHE_AZURE_CONNECTION_STRING: ${{ secrets.SCCACHE_AZURE_CONNECTION_STRING }}
        SCCACHE_AZURE_BLOB_CONTAINER: xiph-rav1e-sccache
        SCCACHE_IDLE_TIMEOUT: 0
      run: sccache --start-server
    - name: Run 1.36.0 tests
      if: matrix.toolchain == '1.36.0' && matrix.conf == '1.36.0-tests'
      run: |
        cargo test --verbose \
                   --features=decode_test,decode_test_dav1d,quick_test,capi
    - name: Run aom tests
      if: matrix.toolchain == 'stable' && matrix.conf == 'aom-tests'
      run: |
        cargo test --verbose --release \
                   --features=decode_test \
                   --color=always -- --color=always --ignored
    - name: Run dav1d tests
      if: matrix.toolchain == 'stable' && matrix.conf == 'dav1d-tests'
      run: |
        cargo test --verbose --release \
                   --features=decode_test_dav1d \
                   --color=always -- --color=always --ignored
    - name: Run bench
      if: matrix.toolchain == 'stable' && matrix.conf == 'bench'
      run: |
        cargo bench --features=bench --no-run --verbose
    - name: Run doc
      if: matrix.toolchain == 'stable' && matrix.conf == 'doc'
      run: |
        cargo doc --verbose --no-deps
    - name: Check no default features
      if: matrix.toolchain == 'stable' && matrix.conf == 'check-no-default'
      run: |
        cargo check --no-default-features
    - name: Check extra features
      if: matrix.toolchain == 'stable' && matrix.conf == 'check-extra-feats'
      run: |
        cargo check --features=capi,dump_lookahead_data
    - name: Run cargo clean
      if: matrix.conf == 'grcov-coveralls'
      uses: actions-rs/cargo@v1
      with:
        command: clean
    - name: Run tests
      if: matrix.conf == 'grcov-coveralls'
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: >
          -Zprofile -Ccodegen-units=1 -Clink-dead-code -Coverflow-checks=off
          -Zno-landing-pads
      run: |
        cargo test --features=decode_test,decode_test_dav1d,quick_test --verbose
    - name: Install grcov
      if: matrix.conf == 'grcov-coveralls'
      env:
        LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_VERSION: 0.5.5
      run: |
        curl -L "$LINK/v$GRCOV_VERSION/grcov-linux-x86_64.tar.bz2" |
        tar xj -C ~/.cargo/bin
    - name: Run grcov
      if: matrix.conf == 'grcov-coveralls'
      id: coverage
      uses: actions-rs/grcov@v0.1
    - name: Coveralls upload
      if: matrix.conf == 'grcov-coveralls'
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ steps.coverage.outputs.report }}
    - name: Stop sccache
      run: sccache --stop-server

  build-windows:

    env:
      RUST_BACKTRACE: 1
      VS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise
      COMPILER_SUBPATH: VC\Tools\MSVC\14.23.28105\bin\Hostx64\x64

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: Install nasm
      run: |
        $NASM_VERSION="nasm-2.14.02"
        curl -LO "https://people.xiph.org/~tdaede/$NASM_VERSION-win64.zip"
        7z e -y "$NASM_VERSION-win64.zip" -o"C:\nasm"
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Build
      run: |
        $Env:Path += ";$Env:VS_PATH\$Env:COMPILER_SUBPATH;C:\nasm;"
        cargo build --release
    - name: Test
      run: |
        $Env:Path += ";$Env:VS_PATH\$Env:COMPILER_SUBPATH;C:\nasm;"
        cargo test --verbose
