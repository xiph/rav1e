name: rav1e

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  rustfmt-clippy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install nasm
      env:
        LINK: http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm
        NASM_VERSION: 2.14.02-1
        NASM_SHA256: >-
          5225d0654783134ae616f56ce8649e4df09cba191d612a0300cfd0494bb5a3ef
      run: |
        curl -O "$LINK/nasm_${NASM_VERSION}_amd64.deb"
        echo "$NASM_SHA256 nasm_${NASM_VERSION}_amd64.deb" | sha256sum --check
        sudo dpkg -i "nasm_${NASM_VERSION}_amd64.deb"
    - name: Install stable
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        components: clippy, rustfmt
    - name: Run rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check --verbose
    - name: Run clippy
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: -- -D warnings --verbose -A clippy::wrong-self-convention -A clippy::many_single_char_names

  build-unix:

    strategy:
      matrix:
        conf:
         - beta-build
         - 1.43.1-tests
         - aom-tests
         - dav1d-tests
         - grcov-coveralls
         - bench
         - doc
         - cargo-c
         - check-no-default
         - check-extra-feats
         - fuzz
        include:
         - conf: beta-build
           toolchain: beta
         - conf: 1.43.1-tests
           toolchain: 1.43.1
         - conf: aom-tests
           toolchain: stable
         - conf: dav1d-tests
           toolchain: stable
         - conf: grcov-coveralls
           toolchain: nightly-2020-05-14
         - conf: bench
           toolchain: stable
         - conf: doc
           toolchain: stable
         - conf: cargo-c
           toolchain: stable
         - conf: check-no-default
           toolchain: stable
         - conf: check-extra-feats
           toolchain: stable
         - conf: fuzz
           toolchain: nightly-2020-05-14

    env:
      RUST_BACKTRACE: 1
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /home/runner/.cache/sccache
      SCCACHE_IDLE_TIMEOUT: 0

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install sccache
      env:
        LINK: https://github.com/mozilla/sccache/releases/download
        SCCACHE_VERSION: 0.2.13
      run: |
        SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
        mkdir -p $HOME/.local/bin
        curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
        mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
        echo "::add-path::$HOME/.local/bin"
    - name: Add nasm
      env:
        LINK: http://debian-archive.trafficmanager.net/debian/pool/main/n/nasm
        NASM_VERSION: 2.14.02-1
        NASM_SHA256: >-
          5225d0654783134ae616f56ce8649e4df09cba191d612a0300cfd0494bb5a3ef
      run: |
        echo "$LINK/nasm_${NASM_VERSION}_amd64.deb" >> DEBS
        echo "$NASM_SHA256 nasm_${NASM_VERSION}_amd64.deb" >> CHECKSUMS
    - name: Add aom
      if: >
        matrix.conf == '1.43.1-tests' || matrix.conf == 'aom-tests' ||
        matrix.conf == 'grcov-coveralls'
      env:
        LINK: http://ppa.launchpad.net/jonathonf/ffmpeg-4/ubuntu/pool/main/a/aom
        AOM_VERSION: 1.0.0.errata1-3~18.04.york0
        AOM_DEV_SHA256: >-
          93e6f64f33722cf9c80a920b3d722713869793e5e1438c05ff9331791728ca90
        AOM_LIB_SHA256: >-
          e1ff5093f077685e4e45ce74264f9ee7ccda4634be58e401ac180b73f4232b63
      run: |
        echo "$LINK/libaom-dev_${AOM_VERSION}_amd64.deb" >> DEBS
        echo "$LINK/libaom0_${AOM_VERSION}_amd64.deb" >> DEBS
        echo "$AOM_DEV_SHA256 libaom-dev_${AOM_VERSION}_amd64.deb" >> CHECKSUMS
        echo "$AOM_LIB_SHA256 libaom0_${AOM_VERSION}_amd64.deb" >> CHECKSUMS
    - name: Add dav1d
      if: >
        matrix.conf == '1.43.1-tests' || matrix.conf == 'dav1d-tests' ||
        matrix.conf == 'grcov-coveralls' || matrix.conf == 'fuzz'
      env:
        LINK: http://www.deb-multimedia.org/pool/main/d/dav1d-dmo
        DAV1D_VERSION: 0.7.0-dmo1
        DAV1D_DEV_SHA256: >-
          9ac5d588ad5db9cb6cd64eeb896305655f676838eef66115b82ab01272c3a504
        DAV1D_LIB_SHA256: >-
          ade22c88d7a2307f4b6351f59bb6696504062ef5aaed88a2c0b6fe37085a20d1
      run: |
        echo "$LINK/libdav1d-dev_${DAV1D_VERSION}_amd64.deb" >> DEBS
        echo "$LINK/libdav1d4_${DAV1D_VERSION}_amd64.deb" >> DEBS
        echo "$DAV1D_DEV_SHA256 libdav1d-dev_${DAV1D_VERSION}_amd64.deb" >> CHECKSUMS
        echo "$DAV1D_LIB_SHA256 libdav1d4_${DAV1D_VERSION}_amd64.deb" >> CHECKSUMS
    - name: Cache packages
      uses: actions/cache@v2
      continue-on-error: true
      id: debs
      with:
        path: ~/.cache/debs
        key: debs-${{ hashFiles('CHECKSUMS') }}
    - name: Fetch packages
      if: steps.debs.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.cache/debs
        cp DEBS CHECKSUMS ~/.cache/debs
        cd ~/.cache/debs
        xargs -a DEBS curl --remote-name-all
        sha256sum -c CHECKSUMS
    - name: Install packages
      run: |
        sudo dpkg -i ~/.cache/debs/*.deb
    - name: Install cargo-c
      if: matrix.conf == 'cargo-c'
      env:
        LINK: https://github.com/lu-zero/cargo-c/releases/download
        CARGO_C_VERSION: 0.6.7
      run: |
        curl -L "$LINK/v$CARGO_C_VERSION/cargo-c-linux.tar.gz" |
        tar xz -C $HOME/.cargo/bin
    - name: Install grcov
      if: matrix.conf == 'grcov-coveralls'
      env:
        LINK: https://github.com/mozilla/grcov/releases/download
        GRCOV_VERSION: 0.5.15
      run: |
        curl -L "$LINK/v$GRCOV_VERSION/grcov-linux-x86_64.tar.bz2" |
        tar xj -C $HOME/.cargo/bin
    - name: Install ${{ matrix.toolchain }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true
    - name: Generate Cargo.lock and Cargo.version
      run: |
        cargo update
        cargo --version > Cargo.version
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: ~/.cargo/registry/cache
        key: ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
    - name: Cache sccache output
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: /home/runner/.cache/sccache
        key: ${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-sccache-
    - name: Start sccache server
      run: |
        sccache --start-server
    - name: Run 1.43.1 tests
      if: matrix.toolchain == '1.43.1' && matrix.conf == '1.43.1-tests'
      run: |
        cargo test --verbose \
                   --features=decode_test,decode_test_dav1d,quick_test,capi
    - name: Run aom tests
      if: matrix.toolchain == 'stable' && matrix.conf == 'aom-tests'
      run: |
        cargo test --verbose --release \
                   --features=decode_test \
                   --color=always -- --color=always --ignored
    - name: Run dav1d tests
      if: matrix.toolchain == 'stable' && matrix.conf == 'dav1d-tests'
      run: |
        cargo test --verbose --release \
                   --features=decode_test_dav1d \
                   --color=always -- --color=always --ignored
    - name: Run build
      if: matrix.conf == 'beta-build'
      run: |
        cargo build --verbose
    - name: Run bench
      if: matrix.toolchain == 'stable' && matrix.conf == 'bench'
      run: |
        cargo bench --features=bench --no-run --verbose
    - name: Run doc
      if: matrix.toolchain == 'stable' && matrix.conf == 'doc'
      run: |
        cargo doc --verbose --no-deps
    - name: Check no default features
      if: matrix.toolchain == 'stable' && matrix.conf == 'check-no-default'
      run: |
        cargo check --no-default-features
    - name: Check extra features
      if: matrix.toolchain == 'stable' && matrix.conf == 'check-extra-feats'
      run: |
        cargo check --features=capi,dump_lookahead_data,serialize
    - name: Run cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        cargo cbuild
    - name: Install cargo-fuzz
      if: matrix.conf == 'fuzz'
      run: |
        cargo install cargo-fuzz
    - name: Run cargo-fuzz
      if: matrix.conf == 'fuzz'
      run: |
        cargo fuzz build
    - name: Run cargo clean
      if: matrix.conf == 'grcov-coveralls'
      uses: actions-rs/cargo@v1
      with:
        command: clean
    - name: Run tests
      if: matrix.conf == 'grcov-coveralls'
      env:
        CARGO_INCREMENTAL: 0
        RUSTFLAGS: >
          -Zprofile -Ccodegen-units=1 -Clink-dead-code -Coverflow-checks=off
          -Cpanic=abort -Zpanic_abort_tests
        RUSTDOCFLAGS: >
          -Zprofile -Ccodegen-units=1 -Clink-dead-code -Coverflow-checks=off
          -Cpanic=abort -Zpanic_abort_tests
      run: |
        cargo test --features=decode_test,decode_test_dav1d,quick_test --verbose --target x86_64-unknown-linux-gnu
    - name: Run grcov
      if: matrix.conf == 'grcov-coveralls'
      id: coverage
      uses: actions-rs/grcov@v0.1
    - name: Stop sccache server
      run: |
        sccache --stop-server
    - name: Coveralls upload
      if: matrix.conf == 'grcov-coveralls'
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ steps.coverage.outputs.report }}

  build-macos:

    strategy:
      matrix:
        conf:
         - cargo-build
         - cargo-test
         - cargo-c

    env:
      RUST_BACKTRACE: 1
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: /Users/runner/Library/Caches/Mozilla.sccache

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install sccache
      run: |
        brew install sccache
    - name: Install nasm
      run: |
        brew install nasm
    - name: Install cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        brew install cargo-c
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Generate Cargo.lock and Cargo.version
      run: |
        cargo update
        cargo --version > Cargo.version
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: ~/.cargo/registry/cache
        key: ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
    - name: Cache sccache output
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: /Users/runner/Library/Caches/Mozilla.sccache
        key: ${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-sccache-
    - name: Start sccache server
      run: |
        sccache --start-server
    - name: Build
      if: matrix.conf == 'cargo-build'
      run: |
        cargo build --release
    - name: Test
      if: matrix.conf == 'cargo-test'
      run: |
        cargo test --verbose
    - name: Run cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        cargo cbuild
    - name: Stop sccache server
      run: |
        sccache --stop-server

  build-windows:

    strategy:
      matrix:
        conf:
         - cargo-build
         - cargo-test
         - cargo-c
        include:
         - conf: cargo-build
           toolchain: stable
         - conf: cargo-test
           toolchain: stable
         - conf: cargo-c
           toolchain: stable-x86_64-pc-windows-gnu

    env:
      RUST_BACKTRACE: 1
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: 300M
      SCCACHE_DIR: C:\sccache

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install sccache
      run: |
        $LINK = "https://github.com/mozilla/sccache/releases/download/0.2.12"
        $SCCACHE_FILE = "sccache-0.2.12-x86_64-pc-windows-msvc"
        curl -LO "$LINK/$SCCACHE_FILE.tar.gz"
        tar xzf "$SCCACHE_FILE.tar.gz"
        echo "::add-path::$Env:GITHUB_WORKSPACE/$SCCACHE_FILE"
    - name: Install nasm
      run: |
        $NASM_VERSION="2.14.02"
        $LINK = "https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64"
        $NASM_FILE = "nasm-$NASM_VERSION-win64"
        curl --ssl-no-revoke -LO "$LINK/$NASM_FILE.zip"
        7z e -y "$NASM_FILE.zip" -o"C:\nasm"
        echo "::add-path::C:\nasm"
    - name: Set MSVC x86_64 linker path
      run: |
        $LinkGlob = "VC\Tools\MSVC\*\bin\Hostx64\x64"
        $env:PATH = "$env:PATH;${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer"
        $LinkPath = vswhere -latest -products * -find "$LinkGlob" | Select-Object -Last 1
        echo "::add-path::$LinkPath"
    - name: Install ${{ matrix.toolchain }}
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.toolchain }}
        override: true
    - name: Install cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        $LINK = "https://github.com/lu-zero/cargo-c/releases/download/v0.6.7"
        $CARGO_C_FILE = "cargo-c-windows-msvc"
        curl -LO "$LINK/$CARGO_C_FILE.zip"
        7z e -y "$CARGO_C_FILE.zip" -o"${env:USERPROFILE}\.cargo\bin"
    - name: Generate Cargo.lock and Cargo.version
      run: |
        cargo update
        cargo --version > Cargo.version
    - name: Cache cargo registry
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: ~/.cargo/registry/cache
        key: ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-cargo-registry-
    - name: Cache sccache output
      uses: actions/cache@v2
      continue-on-error: true
      with:
        path: C:\sccache
        key: ${{ runner.os }}-${{ matrix.conf }}-sccache-${{ hashFiles('**/Cargo.*') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.conf }}-sccache-
    - name: Start sccache server
      run: |
        sccache --start-server
    - name: Build
      if: matrix.conf == 'cargo-build'
      run: |
        cargo build --release
    - name: Test
      if: matrix.conf == 'cargo-test'
      run: |
        cargo test --verbose
    - name: Run cargo-c
      if: matrix.conf == 'cargo-c'
      run: |
        cargo cbuild
    - name: Stop sccache server
      run: |
        sccache --stop-server
